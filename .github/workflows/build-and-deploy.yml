---
name: Build and Deploy to ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  AWS_REGION: eu-west-1
  AWS_ACCOUNT_ID: 716641112337
  ECR_REPOSITORY: sgp-demo
  ECS_CLUSTER: sgp-demo-greg
  ECS_SERVICE: sgp-demo-greg
  ECS_TASK_DEFINITION: sgp-demo-greg
  
jobs:
  codeql_analysis:
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'python' , "ruby"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  yaml-formatting-check:
    runs-on: ubuntu-latest
    needs: codeql_analysis
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: yamllint .

  python-code-check:
    runs-on: ubuntu-latest
    needs: codeql_analysis
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8  # Use flake8 for code checking

      - name: Run Flake8 (or other code checking tool)
        run: flake8 .

  html_check:
    runs-on: ubuntu-latest
    needs: yaml-formatting-check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install HTMLLint
        run: npm install -g htmlhint

      - name: Check HTML Code
        run: htmlhint templates/

  dockerfile_scan:
    runs-on: ubuntu-latest
    needs:
      - yaml-formatting-check
      - python-code-check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | \
            sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb \
            $(lsb_release -cs) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Dockerfile
        run: trivy config Dockerfile

  build_scan_image:
    runs-on: ubuntu-latest
    needs: dockerfile_scan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | \
            sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb \
            $(lsb_release -cs) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Build Docker Image
        run: docker build -t demo-py .

      - name: Scan Docker Image
        run: trivy image demo-py

  build-and-deploy:
    runs-on: ubuntu-latest
    needs:
      - dockerfile_scan
      - html_check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::716641112337:role/cicd-sgp
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-west-1

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sgp-demo
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: 
      - build-and-deploy
      - build_scan_image
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::716641112337:role/cicd-sgp
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-west-1

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1

      - name: Deploy to EC2
        run: |
          aws ec2 run-instances --image-id ami-0d8f6eb4f641ef691 --count 1 --instance-type t2.micro --key-name sgp-demo --security-group-ids sg-0e3e3e0c6e3e3e0c6 --subnet-id subnet-0e3e3e0c6e3e3e0c6 --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=sgp-demo}]' --user-data file://userdata.txt